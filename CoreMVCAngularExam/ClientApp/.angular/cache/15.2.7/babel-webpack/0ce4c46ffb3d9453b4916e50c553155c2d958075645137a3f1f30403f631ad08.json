{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class Contact {}\nexport class ContactDataService {\n  constructor(http, baseUrl) {\n    this.http = http;\n    this.contacts = [];\n    this.apiUrl = 'https://localhost:7217/api/Contacts';\n    this.http = http;\n    this.baseUrl = baseUrl;\n  }\n  //getContactsWithDetails(): Observable<Contact[]> {\n  //  // Ваш запрос на сервер, который возвращает контакты с дополнительными данными\n  //  return this.http.get<Contact[]>(`https://localhost:7217/api/Contacts`);\n  //}\n  showAll() {\n    this.http.get(`https://localhost:7217/api/Contacts`).subscribe(result => {\n      // this.contacts = result;\n      this.contacts.length = 0;\n      this.contacts.push(...result);\n      console.log(result);\n    }, error => console.error(error));\n  }\n  addContact(contactData) {\n    return this.http.post(`https://localhost:7217/api/Contacts`, contactData);\n  }\n  /*\r\n    addContact(newContact: Contact) {\r\n      const body = {\r\n        firstName: newContact.firstName,\r\n        lastName: newContact.lastName,\r\n        categoryId: newContact.categoryId,\r\n        phoneId: newContact.phoneId\r\n      };\r\n      console.log(newContact);\r\n      this.http.post(`https://localhost:7217/api/Contacts`, body).subscribe(\r\n        result => {\r\n          this.showAll();\r\n        },\r\n        error => console.error('Error adding category:', error)\r\n      );\r\n    }\r\n    */\n  updateContact(contactId, firstName, lastName, categoryId, phoneId) {\n    const body = {\n      contactId: contactId,\n      firstName: firstName,\n      lastName: lastName,\n      categoryId: categoryId,\n      phoneId: phoneId\n    };\n    console.log(\"console.log PUT:\", body);\n    this.contactDataSrv.updateContact(body.contactId, body.firstName, body.lastName, body.categoryId, body.phoneId).subscribe(response => {\n      console.log('Contact updated successfully:', response);\n      // Возможно, вы хотите выполнить какие-то дополнительные действия после успешного обновления\n    }, error => {\n      console.error('Error updating contact:', error);\n      // Обработайте ошибку, если это необходимо\n    });\n  }\n\n  deleteContact(contactId) {\n    this.http.delete(`https://localhost:7217/api/Contacts/${contactId}`).subscribe(result => {\n      this.showAll();\n    }, error => console.error(error));\n  }\n}\nContactDataService.ɵfac = function ContactDataService_Factory(t) {\n  return new (t || ContactDataService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n};\nContactDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ContactDataService,\n  factory: ContactDataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAIA,OAAM,MAAOA,OAAO;AAWpB,OAAM,MAAOC,kBAAkB;EAO3BC,YAAoBC,IAAgB,EAAsBC,OAAe;IAArD,SAAI,GAAJD,IAAI;IALnB,aAAQ,GAAc,EAAE;IAEvB,WAAM,GAAG,qCAAqC;IAIhD,IAAI,CAACA,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,OAAO,GAAGA,OAAO;EAC5B;EAEA;EACA;EACA;EACA;EAEEC,OAAO;IACL,IAAI,CAACF,IAAI,CAACG,GAAG,CAAY,qCAAqC,CAAC,CAACC,SAAS,CAACC,MAAM,IAAG;MAClF;MACC,IAAI,CAACC,QAAQ,CAACC,MAAM,GAAG,CAAC;MACxB,IAAI,CAACD,QAAQ,CAACE,IAAI,CAAC,GAAGH,MAAmB,CAAC;MAC1CI,OAAO,CAACC,GAAG,CAACL,MAAM,CAAC;IACrB,CAAC,EAAEM,KAAK,IAAIF,OAAO,CAACE,KAAK,CAACA,KAAK,CAAC,CAAC;EACrC;EAEAC,UAAU,CAACC,WAAgB;IACzB,OAAO,IAAI,CAACb,IAAI,CAACc,IAAI,CAAM,qCAAqC,EAAED,WAAW,CAAC;EAChF;EACF;;;;;;;;;;;;;;;;;EAkBEE,aAAa,CAACC,SAAiB,EAAEC,SAAiB,EAAEC,QAAgB,EAAEC,UAAkB,EAAEC,OAAe;IACvG,MAAMC,IAAI,GAAG;MACXL,SAAS,EAAEA,SAAS;MACpBC,SAAS,EAAEA,SAAS;MACpBC,QAAQ,EAAEA,QAAQ;MAClBC,UAAU,EAAEA,UAAU;MACtBC,OAAO,EAAEA;KACV;IACDX,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAACW,IAAI,CAAC;IACpC,IAAI,CAACC,cAAc,CAACP,aAAa,CAACM,IAAI,CAACL,SAAS,EAAEK,IAAI,CAACJ,SAAS,EAAEI,IAAI,CAACH,QAAQ,EAAEG,IAAI,CAACF,UAAU,EAAEE,IAAI,CAACD,OAAO,CAAC,CAC5GhB,SAAS,CAAEmB,QAAa,IAAI;MAC3Bd,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEa,QAAQ,CAAC;MACtD;IACF,CAAC,EAAGZ,KAAU,IAAI;MAChBF,OAAO,CAACE,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C;IACF,CAAC,CAAC;EACN;;EAEAa,aAAa,CAACR,SAAiB;IAC7B,IAAI,CAAChB,IAAI,CAACyB,MAAM,CAAC,uCAAuCT,SAAS,EAAE,CAAC,CAACZ,SAAS,CAC5EC,MAAM,IAAG;MACP,IAAI,CAACH,OAAO,EAAE;IAChB,CAAC,EACDS,KAAK,IAAIF,OAAO,CAACE,KAAK,CAACA,KAAK,CAAC,CAC9B;EACH;;AAzEWb,kBAAkB;mBAAlBA,kBAAkB,0CAOmB,UAAU;AAAA;AAP/CA,kBAAkB;SAAlBA,kBAAkB;EAAA4B,SAAlB5B,kBAAkB;EAAA6B,YAFjB;AAAM","names":["Contact","ContactDataService","constructor","http","baseUrl","showAll","get","subscribe","result","contacts","length","push","console","log","error","addContact","contactData","post","updateContact","contactId","firstName","lastName","categoryId","phoneId","body","contactDataSrv","response","deleteContact","delete","factory","providedIn"],"sourceRoot":"","sources":["F:\\STEP\\My_Project\\Angular\\CoreMvcAngularExam\\CoreMVCAngularExam\\ClientApp\\src\\app\\contacts\\contactdata.service.ts"],"sourcesContent":["import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport class Contact {\r\n  contactId: number | undefined;\r\n  firstName: string | undefined;\r\n  lastName: string | undefined;\r\n  categoryId: number | undefined;\r\n  phoneId: number | undefined;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ContactDataService {\r\n\r\n  public contacts: Contact[] = [];\r\n  baseUrl: string;\r\n  private apiUrl = 'https://localhost:7217/api/Contacts';\r\n    contactDataSrv: any;\r\n\r\n    constructor(private http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\r\n        this.http = http;\r\n        this.baseUrl = baseUrl;\r\n  }\r\n\r\n  //getContactsWithDetails(): Observable<Contact[]> {\r\n  //  // Ваш запрос на сервер, который возвращает контакты с дополнительными данными\r\n  //  return this.http.get<Contact[]>(`https://localhost:7217/api/Contacts`);\r\n  //}\r\n\r\n    showAll() {\r\n      this.http.get<Contact[]>(`https://localhost:7217/api/Contacts`).subscribe(result => {\r\n       // this.contacts = result;\r\n        this.contacts.length = 0;\r\n        this.contacts.push(...result as Contact[]);\r\n        console.log(result);\r\n      }, error => console.error(error));\r\n  }\r\n\r\n  addContact(contactData: any): Observable<any> {\r\n    return this.http.post<any>(`https://localhost:7217/api/Contacts`, contactData);\r\n  }\r\n/*\r\n  addContact(newContact: Contact) {\r\n    const body = {\r\n      firstName: newContact.firstName,\r\n      lastName: newContact.lastName,\r\n      categoryId: newContact.categoryId,\r\n      phoneId: newContact.phoneId\r\n    };\r\n    console.log(newContact);\r\n    this.http.post(`https://localhost:7217/api/Contacts`, body).subscribe(\r\n      result => {\r\n        this.showAll();\r\n      },\r\n      error => console.error('Error adding category:', error)\r\n    );\r\n  }\r\n  */\r\n  \r\n  updateContact(contactId: number, firstName: string, lastName: string, categoryId: number, phoneId: number): Observable<any> {\r\n    const body = {\r\n      contactId: contactId,\r\n      firstName: firstName,\r\n      lastName: lastName,\r\n      categoryId: categoryId,\r\n      phoneId: phoneId\r\n    };\r\n    console.log(\"console.log PUT:\",body);\r\n    this.contactDataSrv.updateContact(body.contactId, body.firstName, body.lastName, body.categoryId, body.phoneId)\r\n      .subscribe((response: any) => {\r\n        console.log('Contact updated successfully:', response);\r\n        // Возможно, вы хотите выполнить какие-то дополнительные действия после успешного обновления\r\n      }, (error: any) => {\r\n        console.error('Error updating contact:', error);\r\n        // Обработайте ошибку, если это необходимо\r\n      });\r\n  }\r\n\r\n  deleteContact(contactId: number): void {\r\n    this.http.delete(`https://localhost:7217/api/Contacts/${contactId}`).subscribe(\r\n      result => {\r\n        this.showAll();\r\n      },\r\n      error => console.error(error)\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}