{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { AddCategoryDialogComponent } from './addNewCategory.component';\nimport { EditCategoryDialogComponent } from '../edit-category-dialog/edit-category-dialog.component';\n//import { DataSource } from '@angular/cdk/collections';\n//import { Observable, ReplaySubject } from 'rxjs';\n//import { MatTableModule } from '@angular/material/table';\n//import { MatButtonModule } from '@angular/material/button';\n//import { MatTooltipModule } from '@angular/material/tooltip';\n//import { MatIconModule } from '@angular/material/icon';\nlet CategoriesComponent = class CategoriesComponent {\n  constructor(categoryDataSrv, dialog) {\n    this.categoryDataSrv = categoryDataSrv;\n    this.dialog = dialog;\n  }\n  ngOnInit() {\n    this.showAll();\n    /*this.categories = this.categoryDataSrv.categories;*/\n  }\n\n  showAll() {\n    this.categoryDataSrv.showAll();\n    this.categories = this.categoryDataSrv.categories;\n  }\n  addCategory() {\n    // Открываем диалоговое окно для добавления контакта\n    const dialogRef = this.dialog.open(AddCategoryDialogComponent, {\n      width: '400px'\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        console.log('Данные из диалога:', result);\n        this.categoryDataSrv.addCategory(result);\n        // Дополнительные действия\n      } else {\n        console.log('Диалог закрыт без данных');\n      }\n    });\n  }\n  deleteCategory(categoryId) {\n    this.categoryDataSrv.deleteCategory(categoryId);\n  }\n  /*\r\n  \r\n  \r\n  updateCategory(categoryId: number, categoryName: string): void {\r\n    const dialogRef = this.dialog.open(EditCategoryDialogComponent, {\r\n      data: { categoryId, categoryName }\r\n    });\r\n    \r\n  updateCategory(categoryId: number, categoryName: string): void {\r\n    const dialogRef = this.dialog.open(EditCategoryDialogComponent, {\r\n      data: { categoryId, categoryName }\r\n    });\r\n        dialogRef.afterClosed().subscribe((result: { categoryId: number, categoryName: string }) => {\r\n      if (result) {\r\n        // Вызовите ваш API для обновления данных на сервере\r\n        this.http.put(`https://localhost:7217/api/Categories/${result.categoryId}`, { categoryТame: result.categoryName }).subscribe(\r\n          // Ваши обработчики\r\n        );\r\n      }\r\n    });\r\n  */\n  updateCategory(categoryId, categoryName) {\n    if (!categoryName) {\n      // Отобразить сообщение об ошибке пользователю о том, что поле CategoryName обязательно для заполнения\n      return;\n    }\n    const dialogRef = this.dialog.open(EditCategoryDialogComponent, {\n      data: {\n        categoryId,\n        categoryName\n      }\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      if (result && result.categoryId && result.categoryName) {\n        this.categoryDataSrv.updateCategory(result.categoryId, result.categoryName).subscribe(response => {\n          console.log('Updated successfully:', response);\n          this.showAll();\n        }, error => {\n          console.error('Error updating category:', error);\n          if (error instanceof HttpErrorResponse) {\n            console.log('Server error details:', error.error);\n            if (error.error.errors && error.error.errors.CategoryName) {\n              console.log('Validation errors for CategoryName:', error.error.errors.CategoryName);\n              // Отобразить сообщение об ошибке пользователю\n              // Например, используя Angular Material Snackbar\n              // или добавив элемент в DOM для вывода сообщения\n            }\n          }\n        });\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        // Здесь вызывайте ваш метод updateCategory с новыми данными\n        this.categoryDataSrv.updateCategory(result.categoryId, result.categoryName).subscribe(() => {\n          this.showAll();\n        }, error => console.error(error));\n      }\n    });\n  }\n};\nCategoriesComponent = __decorate([Component({\n  selector: 'categories',\n  templateUrl: './categories.component.html',\n  styleUrls: ['./categories.component.css']\n})], CategoriesComponent);\nexport { CategoriesComponent };","map":{"version":3,"mappings":"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","names":["Component","HttpErrorResponse","AddCategoryDialogComponent","EditCategoryDialogComponent","CategoriesComponent","constructor","categoryDataSrv","dialog","ngOnInit","showAll","categories","addCategory","dialogRef","open","width","afterClosed","subscribe","result","console","log","deleteCategory","categoryId","updateCategory","categoryName","data","response","error","errors","CategoryName","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["F:\\STEP\\My_Project\\Angular\\CoreMvcAngularExam\\CoreMVCAngularExam\\ClientApp\\src\\app\\categories\\categories.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { CategoryDataService, Category } from './categorydata.service';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { AddCategoryDialogComponent } from './addNewCategory.component';\r\nimport { EditCategoryDialogComponent } from '../edit-category-dialog/edit-category-dialog.component';\r\n\r\n\r\n//import { DataSource } from '@angular/cdk/collections';\r\n//import { Observable, ReplaySubject } from 'rxjs';\r\n//import { MatTableModule } from '@angular/material/table';\r\n//import { MatButtonModule } from '@angular/material/button';\r\n//import { MatTooltipModule } from '@angular/material/tooltip';\r\n//import { MatIconModule } from '@angular/material/icon';\r\n\r\n\r\n@Component({\r\n  selector: 'categories', \r\n  templateUrl: './categories.component.html',\r\n  styleUrls: ['./categories.component.css'],\r\n})\r\n\r\nexport class CategoriesComponent implements OnInit {\r\n  public categories: Category[] | undefined;\r\n    http: any;\r\n\r\n  constructor(private categoryDataSrv: CategoryDataService, private dialog: MatDialog) {\r\n    }\r\n    \r\n  ngOnInit() {\r\n    this.showAll();\r\n      /*this.categories = this.categoryDataSrv.categories;*/\r\n    }\r\n    \r\n    showAll() {\r\n      this.categoryDataSrv.showAll();\r\n      this.categories = this.categoryDataSrv.categories;\r\n    }\r\n\r\n  addCategory() {\r\n    // Открываем диалоговое окно для добавления контакта\r\n    const dialogRef = this.dialog.open(AddCategoryDialogComponent, {\r\n      width: '400px',\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        console.log('Данные из диалога:', result);\r\n        this.categoryDataSrv.addCategory(result);\r\n        // Дополнительные действия\r\n      } else {\r\n        console.log('Диалог закрыт без данных');\r\n      }\r\n    });\r\n  }\r\n\r\n  deleteCategory(categoryId: number): void {\r\n\r\n    this.categoryDataSrv.deleteCategory(categoryId);\r\n  }\r\n  /*\r\n  \r\n  \r\n  updateCategory(categoryId: number, categoryName: string): void {\r\n    const dialogRef = this.dialog.open(EditCategoryDialogComponent, {\r\n      data: { categoryId, categoryName }\r\n    });\r\n\r\n\r\n  updateCategory(categoryId: number, categoryName: string): void {\r\n    const dialogRef = this.dialog.open(EditCategoryDialogComponent, {\r\n      data: { categoryId, categoryName }\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((result: { categoryId: number, categoryName: string }) => {\r\n      if (result) {\r\n        // Вызовите ваш API для обновления данных на сервере\r\n        this.http.put(`https://localhost:7217/api/Categories/${result.categoryId}`, { categoryТame: result.categoryName }).subscribe(\r\n          // Ваши обработчики\r\n        );\r\n      }\r\n    });\r\n  */\r\n  updateCategory(categoryId: number, categoryName: string): void {\r\n    if (!categoryName) {\r\n      // Отобразить сообщение об ошибке пользователю о том, что поле CategoryName обязательно для заполнения\r\n      return;\r\n    }\r\n    const dialogRef = this.dialog.open(EditCategoryDialogComponent, {\r\n      data: { categoryId, categoryName }\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result && result.categoryId && result.categoryName) {\r\n        this.categoryDataSrv.updateCategory(result.categoryId, result.categoryName)\r\n          .subscribe(\r\n            response => {\r\n              console.log('Updated successfully:', response);\r\n              this.showAll();\r\n            },\r\n            error => {\r\n              console.error('Error updating category:', error);\r\n\r\n              if (error instanceof HttpErrorResponse) {\r\n                console.log('Server error details:', error.error);\r\n\r\n                if (error.error.errors && error.error.errors.CategoryName) {\r\n                  console.log('Validation errors for CategoryName:', error.error.errors.CategoryName);\r\n\r\n                  // Отобразить сообщение об ошибке пользователю\r\n                  // Например, используя Angular Material Snackbar\r\n                  // или добавив элемент в DOM для вывода сообщения\r\n                }\r\n              }\r\n            }\r\n          );\r\n      }\r\n    });\r\n\r\n  \r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        // Здесь вызывайте ваш метод updateCategory с новыми данными\r\n        this.categoryDataSrv.updateCategory(result.categoryId, result.categoryName).subscribe(\r\n          () => {\r\n            this.showAll();\r\n          },\r\n          error => console.error(error)\r\n        );\r\n      }\r\n    });\r\n  }\r\n  \r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}